__VARIABLES__
vPosition
vNormal
mvpMatrix
modelInverseTransposeMatrix
lightIntensity

DLight0Direction
DLight0AmbientColor
DLight0DiffuseColor
DLight0SpecularColor

MaterialAmbientColor
MaterialDiffuseColor
MaterialSpecularColor

boneIndices
boneWeights
boneTransforms
__VARIABLES_END__


__SOURCE__
void main()
{
	float weights[4];
	weights[0] = boneWeights.x;
	weights[1] = boneWeights.y;
	weights[2] = boneWeights.z;
	weights[3] = boneWeights.w;

	vec4 posL      = vec4(0.0, 0.0, 0.0, 0.0);
	for(int i = 0; i < 4; ++i)
	{
		// Assume no nonuniform scaling when transforming normals, so
		// that we do not have to use the inverse-transpose.

		int boneIndex = int(boneIndices[i]);
		posL      = posL + weights[i] * (boneTransforms[boneIndex] * vPosition);
	}

	gl_Position = mvpMatrix * posL;
	// Temp using variable boneTransforms:
	// gl_Position = mvpMatrix * vPosition * boneTransforms[0];

	vec4 vNormal_world = modelInverseTransposeMatrix * vNormal;
	float cosTheta = clamp( dot( vNormal_world, DLight0Direction ), 0.0, 1.0 );
	lightIntensity = MaterialDiffuseColor * DLight0DiffuseColor * cosTheta;

	// Fake the ambient lighting:
	lightIntensity = lightIntensity + DLight0AmbientColor;

	// Temp using variables:
	lightIntensity = lightIntensity + 0.01 * DLight0SpecularColor;
	// Temp using variables:
	lightIntensity = lightIntensity + 0.01 * MaterialAmbientColor + 0.01 * MaterialSpecularColor;

}
__SOURCE_END__

