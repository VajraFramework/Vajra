__VERBATIM__
__VERBATIM_END__

__VARIABLES__
vPosition
vNormal

uvCoords_in
uvCoords_out

modelMatrix
viewMatrix
projectionMatrix

#ifdef PER_PIXEL_LIGHTING
vNormal_out
#else
lightIntensity
#endif

vTangent
vTangent_out
vBitangent
vBitangent_out
LightDirection_tangentspace
TBNmatrix

modelInverseTransposeMatrix

DLight0Direction
DLight0AmbientColor
DLight0DiffuseColor
DLight0SpecularColor

#ifdef PER_PIXEL_LIGHTING
DLight0Direction_out
DLight0AmbientColor_out
DLight0DiffuseColor_out
DLight0SpecularColor_out
#endif

#ifdef ADDITIONAL_LIGHTS
AdditionalLight0Direction
AdditionalLight0Direction_tangentspace
AdditionalLight1Direction
AdditionalLight1Direction_tangentspace
AdditionalLight2Direction
AdditionalLight2Direction_tangentspace
#endif



boneIndices
boneWeights
boneTransforms
otherBoneTransforms
interp

#ifdef BAKED_AMBIENT_LIGHTING
modelCoordsForBakedAmbientLookup_out
#endif

#ifdef SHADOWMAPS_REALTIME
depthBiasMVPMatrix
ShadowCoord
#endif

__VARIABLES_END__


__SOURCE__

#ifdef SKEW_GEOMETRY
vec4 zSkew = vec4(0.0, 0.0, -0.5, 0.0);
vec4 ySkew = vec4(0.0, -0.5, 0.0, 0.0);
#else
vec4 zSkew = vec4(0.0, 0.0, 0.0, 0.0);
vec4 ySkew = vec4(0.0, 0.0, 0.0, 0.0);
#endif

void main()
{
	vec4 posL      = vec4(0.0, 0.0, 0.0, 0.0);
	vec4 posL0     = vec4(0.0, 0.0, 0.0, 0.0);
	vec4 posL1     = vec4(0.0, 0.0, 0.0, 0.0);
	//
	posL0 = posL0 + boneWeights.x * (boneTransforms[int(boneIndices.x)] * vPosition);
	posL0 = posL0 + boneWeights.y * (boneTransforms[int(boneIndices.y)] * vPosition);
	posL0 = posL0 + boneWeights.z * (boneTransforms[int(boneIndices.z)] * vPosition);
	posL0 = posL0 + boneWeights.w * (boneTransforms[int(boneIndices.w)] * vPosition);
	//
	posL1 = posL1 + boneWeights.x * (otherBoneTransforms[int(boneIndices.x)] * vPosition);
	posL1 = posL1 + boneWeights.y * (otherBoneTransforms[int(boneIndices.y)] * vPosition);
	posL1 = posL1 + boneWeights.z * (otherBoneTransforms[int(boneIndices.z)] * vPosition);
	posL1 = posL1 + boneWeights.w * (otherBoneTransforms[int(boneIndices.w)] * vPosition);
	//
	posL.x = posL0.x + (posL1.x - posL0.x) * interp.x;
	posL.y = posL0.y + (posL1.y - posL0.y) * interp.x;
	posL.z = posL0.z + (posL1.z - posL0.z) * interp.x;
	posL.w = posL0.w + (posL1.w - posL0.w) * interp.x;


	gl_Position = modelMatrix * posL;

#ifdef BAKED_AMBIENT_LIGHTING
	modelCoordsForBakedAmbientLookup_out.x = gl_Position.x;
	modelCoordsForBakedAmbientLookup_out.y = gl_Position.y;
	modelCoordsForBakedAmbientLookup_out.z = gl_Position.z;
#endif

	float yAmt = gl_Position.y;
	vec4 skewed_position = (gl_Position + (zSkew * yAmt) + (ySkew * yAmt));
	gl_Position = projectionMatrix * viewMatrix * skewed_position;
#ifdef SHADOWMAPS_REALTIME
	ShadowCoord = depthBiasMVPMatrix * skewed_position;
#endif

	// Normal mapping stuff:
	// Debug
	vTangent_out = vTangent;
	vBitangent_out = vBitangent;
	//
	//
	// model to camera = ModelView
	mat4 model_view_matrix = viewMatrix * modelMatrix;
	vec4 vTangent_cameraspace = model_view_matrix * vTangent;
	vec4 vBitangent_cameraspace = model_view_matrix * vBitangent;
	vec4 vNormal_cameraspace = model_view_matrix * vNormal;
	//
	TBNmatrix = (mat4(
		vTangent_cameraspace,
		vBitangent_cameraspace,
		vNormal_cameraspace,
		vec4(0.0, 0.0, 0.0, 1.0)
	));

	LightDirection_tangentspace = vec3(DLight0Direction);

	AdditionalLight0Direction_tangentspace = AdditionalLight0Direction;
	AdditionalLight1Direction_tangentspace = AdditionalLight1Direction;
	AdditionalLight2Direction_tangentspace = AdditionalLight2Direction;

#ifdef PER_PIXEL_LIGHTING
	vNormal_out = modelInverseTransposeMatrix * vNormal;

	DLight0Direction_out = DLight0Direction;
	DLight0AmbientColor_out = DLight0AmbientColor;
	DLight0DiffuseColor_out = DLight0DiffuseColor;
	DLight0SpecularColor_out = DLight0SpecularColor;
#else
	vec4 vNormal_world = modelInverseTransposeMatrix * vNormal;
	float cosTheta = clamp( dot( vNormal_world, DLight0Direction ), 0.0, 1.0 );
	lightIntensity = DLight0DiffuseColor * cosTheta;

	// Fake the ambient lighting:
	lightIntensity = lightIntensity + DLight0AmbientColor;

	// Temp using variables:
	lightIntensity = lightIntensity + interp.x * DLight0SpecularColor;
#endif


	uvCoords_out = uvCoords_in;
}
__SOURCE_END__

