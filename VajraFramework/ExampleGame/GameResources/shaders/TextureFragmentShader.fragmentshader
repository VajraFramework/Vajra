#ifplatform iOS | Android
precision mediump float;
#endif

varying vec2 uvCoords_out;
uniform sampler2D myTextureSampler;
uniform sampler2D bakedAmbientGridTextureSampler;

varying vec3 modelCoordsForBakedAmbientLookup_out;

#ifdef PER_PIXEL_LIGHTING
varying vec4 vNormal_out;
varying vec4 DLight0Direction_out;
varying vec4 DLight0AmbientColor_out;
varying vec4 DLight0DiffuseColor_out;
varying vec4 DLight0SpecularColor_out;
#else
varying vec4 lightIntensity;
#endif

float DOWN_AMBIENT_INTENSITY_FACTOR = 0.2;
float UP_AMBIENT_INTENSITY_FACTOR = 0.2;

void main()
{
#ifdef PER_PIXEL_LIGHTING
	float cosTheta = clamp( dot( vNormal_out, DLight0Direction_out ), 0.0, 1.0 );
	vec4 lightIntensity = DLight0DiffuseColor_out * cosTheta;

	// Fake the ambient lighting:
	lightIntensity = lightIntensity + DLight0AmbientColor_out;

	// Temp using variables:
	lightIntensity = lightIntensity + DLight0SpecularColor_out;
#endif

	vec4 color_temp = vec4(texture2D(myTextureSampler, uvCoords_out).rgba) * lightIntensity;

	vec2 uv_into_bakedmap = modelCoordsForBakedAmbientLookup_out.xz;
	// Adjust uv into bakedmap according to the size of exported map:
	uv_into_bakedmap.x = (uv_into_bakedmap.x + 0.5) / 64.0;
	uv_into_bakedmap.y = -1.0 * (uv_into_bakedmap.y - 0.5) / 64.0;
	vec4 baked_ambient_value = texture2D(bakedAmbientGridTextureSampler, uv_into_bakedmap);
	float down_ambient_intensity_at_point = baked_ambient_value.r;
	float up_ambient_intensity_at_point = baked_ambient_value.g;
	float height_cutoof_at_pixel = baked_ambient_value.b * 10.0;

	// TODO [Hack] Not applying ambient occlusion to heights above 2.0, change this to be read from the blue channel of the baked map instead:
	if (modelCoordsForBakedAmbientLookup_out.y > height_cutoof_at_pixel) {
		down_ambient_intensity_at_point = 0.0;
	}
	gl_FragColor = color_temp - down_ambient_intensity_at_point * DOWN_AMBIENT_INTENSITY_FACTOR + up_ambient_intensity_at_point * UP_AMBIENT_INTENSITY_FACTOR;
}

