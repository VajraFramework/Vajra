__VERBATIM__
#ifplatform iOS | Android
precision mediump float;
#endif
__VERBATIM_END__

__VARIABLES__

#ifdef PER_PIXEL_LIGHTING
vNormal_out

DLight0Direction_out
DLight0AmbientColor_out
DLight0DiffuseColor_out
DLight0SpecularColor_out

MaterialAmbientColor_out
MaterialDiffuseColor_out
MaterialSpecularColor_out
#else
lightIntensity
#endif

#ifdef SHADOWMAPS_REALTIME
depthTextureSampler
ShadowCoord
#endif

__VARIABLES_END__

__SOURCE__

#ifdef SHADOWMAPS_REALTIME_POISSON_FILTERING
float POISSON_DIVIDE = 700.0;
vec2 poison0 = vec2( -0.94201624, -0.39906216 ) / POISSON_DIVIDE;
vec2 poison1 = vec2( 0.94558609, -0.76890725 ) / POISSON_DIVIDE;
vec2 poison2 = vec2( -0.094184101, -0.92938870 ) / POISSON_DIVIDE;
vec2 poison3 = vec2( 0.34495938, 0.29387760 ) / POISSON_DIVIDE;
#endif

#ifdef SHADOWMAPS_REALTIME_PCF_FILTERING
float PCF_DIVIDE = 2000.0;
vec2 pcf0 = vec2(-1.5, 0.5) / PCF_DIVIDE;
vec2 pcf1 = vec2(0.5, 0.5) / PCF_DIVIDE;
vec2 pcf2 = vec2(-1.5, -1.5) / PCF_DIVIDE;
vec2 pcf3 = vec2(0.5, -1.5) / PCF_DIVIDE;
#endif



void main()
{

	vec4 finalColor = vec4(1.0, 0.0, 0.0, 1.0);;

#ifdef PER_PIXEL_LIGHTING
	float cosTheta = clamp( dot( vNormal_out, DLight0Direction_out ), 0.0, 1.0 );
	vec4 lightIntensity = MaterialDiffuseColor_out * DLight0DiffuseColor_out * cosTheta;

	// Fake the ambient lighting:
	lightIntensity = lightIntensity + DLight0AmbientColor_out;

	// Temp using variables:
	lightIntensity = lightIntensity + DLight0SpecularColor_out;

	// Temp using variables:
	lightIntensity = lightIntensity + 0.01 * MaterialAmbientColor_out + 0.01 * MaterialSpecularColor_out;
#endif

	finalColor = lightIntensity;

#ifdef SHADOWMAPS_REALTIME
	float visibility = 1.0;
	float bias = 0.002;
	float fragment_depth = ShadowCoord.z / ShadowCoord.w - bias;
	float depth_value = 0.0;

#ifdef SHADOWMAPS_REALTIME_NO_FILTERING
	depth_value = texture2D( depthTextureSampler, ShadowCoord.xy).r;
	visibility = clamp((depth_value - fragment_depth) * 10000.0, 0.0, 1.0);
#endif

#ifdef SHADOWMAPS_REALTIME_POISSON_FILTERING
	depth_value = texture2D( depthTextureSampler, ShadowCoord.xy + poison0).r;
	if (depth_value < fragment_depth) {
		visibility -= 0.25;
	}
	depth_value = texture2D( depthTextureSampler, ShadowCoord.xy + poison1).r;
	if (depth_value < fragment_depth) {
		visibility -= 0.25;
	}
	depth_value = texture2D( depthTextureSampler, ShadowCoord.xy + poison2).r;
	if (depth_value < fragment_depth) {
		visibility -= 0.25;
	}
	depth_value = texture2D( depthTextureSampler, ShadowCoord.xy + poison3).r;
	if (depth_value < fragment_depth) {
		visibility -= 0.25;
	}
#endif

#ifdef SHADOWMAPS_REALTIME_PCF_FILTERING
	depth_value = texture2D( depthTextureSampler, ShadowCoord.xy + pcf0).r;
	visibility -= clamp((fragment_depth - depth_value) * 10000.0, 0.0, 0.25);
	//
	depth_value = texture2D( depthTextureSampler, ShadowCoord.xy + pcf1).r;
	visibility -= clamp((fragment_depth - depth_value) * 10000.0, 0.0, 0.25);
	//
	depth_value = texture2D( depthTextureSampler, ShadowCoord.xy + pcf1).r;
	visibility -= clamp((fragment_depth - depth_value) * 10000.0, 0.0, 0.25);
	//
	depth_value = texture2D( depthTextureSampler, ShadowCoord.xy + pcf1).r;
	visibility -= clamp((fragment_depth - depth_value) * 10000.0, 0.0, 0.25);
#endif



	visibility = clamp(visibility + 0.5, 0.0, 1.0);
	finalColor = finalColor * (visibility + 0.0); // + finalColor;
	finalColor.a = 1.0;

#endif

	gl_FragColor = finalColor;
}

__SOURCE_END__

