__VERBATIM__
__VERBATIM_END__

__VARIABLES__
vPosition
vNormal

vTangent
vBitangent
TBNmatrix

uvCoords_in
uvCoords_out

modelMatrix
viewMatrix
projectionMatrix


#ifdef PER_PIXEL_LIGHTING
vNormal_out
#else
lightIntensity
#endif

modelInverseTransposeMatrix

#ifndef PER_PIXEL_LIGHTING
DLight0Direction
DLight0AmbientColor
DLight0DiffuseColor
#endif

#ifdef BAKED_AMBIENT_LIGHTING
modelCoordsForBakedAmbientLookup_out
#endif

#ifdef SHADOWMAPS_REALTIME
depthBiasMVPMatrix
ShadowCoord
#endif

__VARIABLES_END__


__SOURCE__

#ifdef SKEW_GEOMETRY
vec4 zSkew = vec4(0.0, 0.0, -.5, 0.0);
vec4 ySkew = vec4(0.0, -0.5, 0.0, 0.0);
#else
vec4 zSkew = vec4(0.0, 0.0, 0.0, 0.0);
vec4 ySkew = vec4(0.0, 0.0, 0.0, 0.0);
#endif

void main()
{
	gl_Position = modelMatrix * vPosition;

#ifdef BAKED_AMBIENT_LIGHTING
	modelCoordsForBakedAmbientLookup_out.x = gl_Position.x;
	modelCoordsForBakedAmbientLookup_out.y = gl_Position.y;
	modelCoordsForBakedAmbientLookup_out.z = gl_Position.z;
#endif

	float yAmt = gl_Position.y;
	vec4 skewed_position = (gl_Position + (zSkew * yAmt) + (ySkew * yAmt));
	gl_Position = projectionMatrix * viewMatrix * skewed_position;
#ifdef SHADOWMAPS_REALTIME
	ShadowCoord = depthBiasMVPMatrix * skewed_position;
#endif

	TBNmatrix = (mat4(
		modelInverseTransposeMatrix * normalize(vTangent),
		modelInverseTransposeMatrix * normalize(vBitangent),
		modelInverseTransposeMatrix * normalize(vNormal),
		vec4(0.0, 0.0, 0.0, 1.0)
	));

	uvCoords_out = uvCoords_in;


#ifdef PER_PIXEL_LIGHTING
	vNormal_out = modelInverseTransposeMatrix * vNormal;

#else
	vec4 vNormal_world = modelInverseTransposeMatrix * vNormal;
	float cosTheta = clamp( dot( vNormal_world, DLight0Direction ), 0.0, 1.0 );
	lightIntensity = DLight0DiffuseColor * cosTheta;

	// Fake the ambient lighting:
	lightIntensity = lightIntensity + DLight0AmbientColor;

#endif


}
__SOURCE_END__

