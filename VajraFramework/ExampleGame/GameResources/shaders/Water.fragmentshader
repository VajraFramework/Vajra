__VERBATIM__
#ifplatform iOS | Android
precision mediump float;
#endif
__VERBATIM_END__

__VARIABLES__

uvCoords_out

#ifdef PER_PIXEL_LIGHTING
vNormal_out
DLight0Direction
DLight0AmbientColor
DLight0DiffuseColor
#else
lightIntensity
#endif

myTextureSampler

#ifdef ADDITIONAL_LIGHTS
AdditionalLight0Direction
AdditionalLight0Ambient
AdditionalLight0Diffuse
AdditionalLight1Direction
AdditionalLight1Ambient
AdditionalLight1Diffuse
AdditionalLight2Direction
AdditionalLight2Ambient
AdditionalLight2Diffuse
#endif

#ifdef SHADOWMAPS_REALTIME
depthTextureSampler
ShadowCoord
#endif

scrolling_uv_offset
secondaryTexture

__VARIABLES_END__

__SOURCE__

#ifdef SHADOWMAPS_REALTIME
#ifdef SHADOWMAPS_REALTIME_POISSON_FILTERING
float POISSON_DIVIDE = 700.0;
vec2 poison0 = vec2( -0.94201624, -0.39906216 ) / POISSON_DIVIDE;
vec2 poison1 = vec2( 0.94558609, -0.76890725 ) / POISSON_DIVIDE;
vec2 poison2 = vec2( -0.094184101, -0.92938870 ) / POISSON_DIVIDE;
vec2 poison3 = vec2( 0.34495938, 0.29387760 ) / POISSON_DIVIDE;
#endif

#ifdef SHADOWMAPS_REALTIME_PCF_FILTERING
float PCF_DIVIDE = 2000.0;
vec2 pcf0 = vec2(-1.5, 0.5) / PCF_DIVIDE;
vec2 pcf1 = vec2(0.5, 0.5) / PCF_DIVIDE;
vec2 pcf2 = vec2(-1.5, -1.5) / PCF_DIVIDE;
vec2 pcf3 = vec2(0.5, -1.5) / PCF_DIVIDE;
#endif
#endif


void main()
{
	vec2 scrolled_uvs_1 = vec2(uvCoords_out.x + sin(gl_FragCoord.x / 20.0) / 10.0, uvCoords_out.y + scrolling_uv_offset);
	vec2 scrolled_uvs_2 = vec2(uvCoords_out.x + cos(gl_FragCoord.x / 7.0) / 20.0, uvCoords_out.y + scrolling_uv_offset);

#ifdef PER_PIXEL_LIGHTING
	float cosTheta = clamp( dot( vNormal_out, 1.0 * DLight0Direction), 0.0, 1.0 );
	vec4 lightIntensity = DLight0DiffuseColor * cosTheta;
	lightIntensity = lightIntensity + DLight0AmbientColor;

#ifdef ADDITIONAL_LIGHTS
	cosTheta = clamp( dot( vNormal_out, 1.0 * AdditionalLight0Direction), 0.0, 1.0 );
	lightIntensity = lightIntensity + AdditionalLight0Diffuse * cosTheta;
	lightIntensity = lightIntensity + AdditionalLight0Ambient;
	//
	cosTheta = clamp( dot( vNormal_out, 1.0 * AdditionalLight1Direction), 0.0, 1.0 );
	lightIntensity = lightIntensity + AdditionalLight1Diffuse * cosTheta;
	lightIntensity = lightIntensity + AdditionalLight1Ambient;
	//
	cosTheta = clamp( dot( vNormal_out, 1.0 * AdditionalLight2Direction), 0.0, 1.0 );
	lightIntensity = lightIntensity + AdditionalLight2Diffuse * cosTheta;
	lightIntensity = lightIntensity + AdditionalLight2Ambient;
#endif
#endif


	vec4 finalColor = vec4(texture2D(myTextureSampler, scrolled_uvs_1).rgba) * lightIntensity * 0.6 + vec4(texture2D(secondaryTexture, scrolled_uvs_2).rgba) * lightIntensity * 0.4;

	
#ifdef SHADOWMAPS_REALTIME
	float visibility = 1.0;
	float bias = 0.004;
	float fragment_depth = ShadowCoord.z / ShadowCoord.w - bias;
	float depth_value = 0.0;

#ifdef SHADOWMAPS_REALTIME_NO_FILTERING
	depth_value = texture2D( depthTextureSampler, ShadowCoord.xy).r;
	visibility = clamp((depth_value - fragment_depth) * 10000.0, 0.0, 1.0);
#endif

#ifdef SHADOWMAPS_REALTIME_POISSON_FILTERING
	depth_value = texture2D( depthTextureSampler, ShadowCoord.xy + poison0).r;
	if (depth_value < fragment_depth) {
		visibility -= 0.25;
	}
	depth_value = texture2D( depthTextureSampler, ShadowCoord.xy + poison1).r;
	if (depth_value < fragment_depth) {
		visibility -= 0.25;
	}
	depth_value = texture2D( depthTextureSampler, ShadowCoord.xy + poison2).r;
	if (depth_value < fragment_depth) {
		visibility -= 0.25;
	}
	depth_value = texture2D( depthTextureSampler, ShadowCoord.xy + poison3).r;
	if (depth_value < fragment_depth) {
		visibility -= 0.25;
	}
#endif

#ifdef SHADOWMAPS_REALTIME_PCF_FILTERING
	depth_value = texture2D( depthTextureSampler, ShadowCoord.xy + pcf0).r;
	visibility -= clamp((fragment_depth - depth_value) * 10000.0, 0.0, 0.25);
	//
	depth_value = texture2D( depthTextureSampler, ShadowCoord.xy + pcf1).r;
	visibility -= clamp((fragment_depth - depth_value) * 10000.0, 0.0, 0.25);
	//
	depth_value = texture2D( depthTextureSampler, ShadowCoord.xy + pcf1).r;
	visibility -= clamp((fragment_depth - depth_value) * 10000.0, 0.0, 0.25);
	//
	depth_value = texture2D( depthTextureSampler, ShadowCoord.xy + pcf1).r;
	visibility -= clamp((fragment_depth - depth_value) * 10000.0, 0.0, 0.25);
#endif



	visibility = clamp(visibility + 0.5, 0.0, 1.0);
	finalColor = finalColor * visibility;

#endif

	gl_FragColor = finalColor;
}

__SOURCE_END__

