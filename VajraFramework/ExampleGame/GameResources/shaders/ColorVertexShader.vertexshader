__VERBATIM__
__VERBATIM_END__

__VARIABLES__
vPosition
vNormal

modelMatrix
vpMatrix

modelInverseTransposeMatrix

#ifdef PER_PIXEL_LIGHTING
vNormal_out
#else
lightIntensity
#endif

#ifndef PER_PIXEL_LIGHTING
DLight0Direction
DLight0AmbientColor
DLight0DiffuseColor
MaterialDiffuseColor
#endif

__VARIABLES_END__


__SOURCE__

#ifdef SKEW_GEOMETRY
vec4 zSkew = vec4(0.0, 0.0, -.5, 0.0);
vec4 ySkew = vec4(0.0, -0.5, 0.0, 0.0);
#else
vec4 zSkew = vec4(0.0, 0.0, 0.0, 0.0);
vec4 ySkew = vec4(0.0, 0.0, 0.0, 0.0);
#endif

void main()
{
	gl_Position = modelMatrix * vPosition;

	float yAmt = gl_Position.y;
	vec4 skewed_position = (gl_Position + (zSkew * yAmt) + (ySkew * yAmt));
	gl_Position = vpMatrix * skewed_position;

#ifdef PER_PIXEL_LIGHTING
	vNormal_out = modelInverseTransposeMatrix * vNormal;

#else
	vec4 vNormal_world = modelInverseTransposeMatrix * vNormal;
	float cosTheta = clamp( dot( vNormal_world, DLight0Direction ), 0.0, 1.0 );
	lightIntensity = MaterialDiffuseColor * DLight0DiffuseColor * cosTheta;

	// Fake the ambient lighting:
	lightIntensity = lightIntensity + DLight0AmbientColor;

#endif
}
__SOURCE_END__

